import{_ as i,r as c,o as l,c as u,a as n,b as s,d as a,w as t,f as p}from"./app-330b5ec4.js";const r={},d=n("h1",{id:"特性指令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#特性指令","aria-hidden":"true"},"#"),s(" 特性指令")],-1),k=n("p",null,"这是一个简单易用的指令分发服务扩展",-1),m={class:"custom-container tip"},v=n("p",{class:"custom-container-title"},"小提示",-1),h=n("p",null,"自带的指令系统是一个十分简单且轻量的指令系统，只有触发指令的功能",-1),g={href:"https://github.com/ExerciseBook",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/ParaParty/OneBot-Framework",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/discord-net/Discord.Net",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"CommandSeries",-1),y=n("code",null,"SoraCommand",-1),f=n("p",null,[s("但是并没有实现自动的参数转换和注入（个人觉得这样做会让框架变得很重所以就不搞了"),n("s",null,"摸了"),s("）")],-1),C=n("code",null,"GroupMessageEventArgs",-1),A=n("code",null,"PrivateMessageEventArgs",-1),w=n("code",null,"CommandSeries",-1),x=n("code",null,"CommandSeries",-1),E=p('<div class="custom-container warning"><p class="custom-container-title">注意</p><p><code>SourceType</code> 的值必须为 <code>MessageSourceMatchFlag.Group</code> 或 <code>MessageSourceMatchFlag.Private</code> 或 <code>MessageSourceMatchFlag.All</code></p></div><p><code>SourceType</code> 是用于指定指令的触发范围的，并且有着以下的对应关系</p><table><thead><tr><th>值</th><th>作用</th></tr></thead><tbody><tr><td>MessageSourceMatchFlag.All</td><td>来自群聊和私聊的消息均会触发该指令</td></tr><tr><td>MessageSourceMatchFlag.Group</td><td>来自群聊的消息会触发该指令</td></tr><tr><td>MessageSourceMatchFlag.Private</td><td>来自私聊的消息会触发该指令</td></tr></tbody></table>',3),M=n("code",null,"SoraCommand",-1),I=n("code",null,"CommandExpressions",-1),q=p(`<div class="custom-container tip"><p class="custom-container-title">小提示</p><p>指令的匹配模式可以通过修改 <code>MatchType</code> 来改变</p><p>一共有三种匹配模式</p><p><code>MatchType.Full</code> -&gt; 全字匹配</p><p><code>MatchType.Regex</code> -&gt; 正则匹配</p><p><code>MatchType.KeyWord</code> -&gt; 关键字匹配</p></div><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>如果注册指令的方法为非静态方法，则执行实例将会在初始化时由框架创建并保存</p><p>这意味着在多次调用指令时，负责执行的指令的实例将一直都会是初始化时所创建的实例，其中的属性值将会是上次执行结束后的值</p></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>如果在指令触发后不想再触发其他的指令或者事件的话，请将事件参数中的 <code>IsContinueEventChain</code> 设置为 <code>false</code></p><p>在下方的实例中将示范如何使用</p></div><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>当指令的表达式和优先级一致时指令的执行顺序为随机的顺序</p></div><h3 id="指令示例" tabindex="-1"><a class="header-anchor" href="#指令示例" aria-hidden="true">#</a> 指令示例</h3><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Sora<span class="token punctuation">.</span>Attributes<span class="token punctuation">.</span>Command</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Sora<span class="token punctuation">.</span>Enumeration</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Sora<span class="token punctuation">.</span>EventArgs<span class="token punctuation">.</span>SoraEvent</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">Sora_Test</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CommandSeries</span><span class="token attribute-arguments"><span class="token punctuation">(</span>SeriesName <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Commands</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">SoraCommand</span><span class="token attribute-arguments"><span class="token punctuation">(</span>CommandExpressions <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;好耶&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
                 Description <span class="token operator">=</span> <span class="token string">&quot;死了啦都你害的啦&quot;</span><span class="token punctuation">,</span>
                 SourceType <span class="token operator">=</span> MessageSourceMatchFlag<span class="token punctuation">.</span>All<span class="token punctuation">,</span>
                 Priority <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask</span> <span class="token function">TestCommand1</span><span class="token punctuation">(</span><span class="token class-name">BaseMessageEventArgs</span> eventArgs<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        eventArgs<span class="token punctuation">.</span>IsContinueEventChain <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> eventArgs<span class="token punctuation">.</span><span class="token function">Reply</span><span class="token punctuation">(</span><span class="token string">&quot;坏耶&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态注册指令" tabindex="-1"><a class="header-anchor" href="#动态注册指令" aria-hidden="true">#</a> 动态注册指令</h2><div class="custom-container tip"><p class="custom-container-title">小提示</p><p>动态指令也可以限制触发的消息来源</p></div><p>动态指令的注册由下面两种方法完成：</p><h3 id="_1-字符串表达式指令" tabindex="-1"><a class="header-anchor" href="#_1-字符串表达式指令" aria-hidden="true">#</a> ① 字符串表达式指令</h3><p>和普通的特性指令没有较大的区别设置表达式后可以设置匹配模式</p><p>注册示例代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>service<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>CommandManager<span class="token punctuation">.</span><span class="token function">RegisterGroupDynamicCommand</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;好耶&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> eventArgs <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        eventArgs<span class="token punctuation">.</span>IsContinueEventChain <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> eventArgs<span class="token punctuation">.</span><span class="token function">Reply</span><span class="token punctuation">(</span><span class="token string">&quot;坏耶&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-自定义匹配表达式指令" tabindex="-1"><a class="header-anchor" href="#_2-自定义匹配表达式指令" aria-hidden="true">#</a> ② 自定义匹配表达式指令</h3><p>使用自定义的匹配方法来扩展指令的匹配方式</p><p>注册示例代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>service<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>CommandManager<span class="token punctuation">.</span><span class="token function">RegisterGroupDynamicCommand</span><span class="token punctuation">(</span>
    eventArgs <span class="token operator">=&gt;</span> eventArgs<span class="token punctuation">.</span>IsSuperUser<span class="token punctuation">,</span>
    <span class="token keyword">async</span> e <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">await</span> e<span class="token punctuation">.</span><span class="token function">Reply</span><span class="token punctuation">(</span><span class="token string">&quot;哇是超管&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指令的异常处理" tabindex="-1"><a class="header-anchor" href="#指令的异常处理" aria-hidden="true">#</a> 指令的异常处理</h2>`,19),P=p(`<p>在配置完成异常处理后，指令出错时不会抛出错误，并调用配置好的异常处理方法</p><p>示例代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">//实例化Sora服务</span>
<span class="token class-name">ISoraService</span> service <span class="token operator">=</span> SoraServiceFactory<span class="token punctuation">.</span><span class="token function">CreateService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">ServerConfig</span>
<span class="token punctuation">{</span>
    CommandExceptionHandle <span class="token operator">=</span> CommandExceptionHandle<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//exception 为指令执行抛出的异常</span>
<span class="token comment">//eventArgs 是本次消息的事件上下文</span>
<span class="token comment">//log 为框架自动生成的错误日志</span>
<span class="token keyword">async</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CommandExceptionHandle</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">,</span> <span class="token class-name">BaseMessageEventArgs</span> eventArgs<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> log<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> eventArgs<span class="token punctuation">.</span><span class="token function">Reply</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;死了啦都你害的啦\\r\\n</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">log</span><span class="token punctuation">}</span></span><span class="token string">\\r\\n</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">exception<span class="token punctuation">.</span>Message</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function T(F,R){const o=c("ExternalLinkIcon"),e=c("RouterLink");return l(),u("div",null,[d,k,n("div",m,[v,h,n("p",null,[s("如果想要使用支持IOC/参数注入或者更加复杂的指令管理系统，这里推荐使用由"),n("a",g,[s("Eric_Lian"),a(o)]),s("编写的指令框架"),n("a",b,[s("OneBot-Framework"),a(o)])])]),n("p",null,[s("实现了和 "),n("a",_,[s("Discord.Net"),a(o)]),s(" 框架类似的特性指令服务")]),n("p",null,[s("使用特性 "),a(e,{to:"/API/Sora.Attributes.Command/CommandSeries.html"},{default:t(()=>[S]),_:1}),s(" 来标识需要注册指令的类（没有将不会被识别）")]),n("p",null,[s("通过特性 "),a(e,{to:"/API/Sora.Attributes.Command/SoraCommand.html"},{default:t(()=>[y]),_:1}),s(" 来分标记需要注册的指令")]),f,n("p",null,[s("该指令服务只会传递框架中的 "),a(e,{to:"/API/Sora.EventArgs.SoraEvent/GroupMessageEventArgs.html"},{default:t(()=>[C]),_:1}),s(" 和 "),a(e,{to:"/API/Sora.EventArgs.SoraEvent/PrivateMessageEventArgs.html"},{default:t(()=>[A]),_:1}),s(" 的事件参数，其余的响应逻辑和参数处理需要自己完成")]),n("p",null,[s("启动服务器后指令服务就会自动注册有"),a(e,{to:"/API/Sora.Attributes.Command/CommandSeries.html"},{default:t(()=>[w]),_:1}),s("特性的类下的所有指令")]),n("p",null,[n("strong",null,[s("没有"),a(e,{to:"/API/Sora.Attributes.Command/CommandSeries.html"},{default:t(()=>[x]),_:1}),s("特性的类将会被忽略")])]),E,n("p",null,[a(e,{to:"/API/Sora.Attributes.Command/SoraCommand.html"},{default:t(()=>[M]),_:1}),s(" 必须设置 "),I,s(" 的值才能被识别为合法指令")]),q,n("p",null,[s("在"),a(e,{to:"/API/Sora.Interfaces/ISoraConfig.html"},{default:t(()=>[s("ISoraConfig")]),_:1}),s(" 中配置 "),a(e,{to:"/API/Sora.Interfaces/ISoraConfig/CommandExceptionHandle.html"},{default:t(()=>[s("CommandExceptionHandle")]),_:1}),s(" 属性完成指令的异常处理")]),P])}const N=i(r,[["render",T],["__file","command.html.vue"]]);export{N as default};
