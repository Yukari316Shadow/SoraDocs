import{_ as n,z as s,A as a,a6 as t}from"./framework-cb9358d9.js";const p={},e=t(`<h1 id="自定义消息" tabindex="-1"><a class="header-anchor" href="#自定义消息" aria-hidden="true">#</a> 自定义消息</h1><p>当你希望bot不仅仅局限于只能发送文本的时候，你需要创建一个<code>自定义消息体</code>。 正如正常聊天时一样，自定义消息允许你发送图文并茂的信息，其中可以包括At、表情、图片等，你甚至还可以直接从<code>CQ码</code>转换为自定义消息体。</p><h1 id="背景知识" tabindex="-1"><a class="header-anchor" href="#背景知识" aria-hidden="true">#</a> 背景知识</h1><p>首先需要了解用于定义消息体的类：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Sora<span class="token punctuation">.</span>Entities<span class="token punctuation">.</span>MessageBody
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该类用来定义需要发送的消息。 一个消息体可以包含多个消息段（每个消息段可以是不同种类的消息），在客户端显示的时候会显示在一个消息中。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// 发送群聊消息</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>groupId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>发送目标群id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>message<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>消息内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span>                 ←这个就是要发送的消息内容</span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>timeout<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>覆盖原有超时<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>see</span> <span class="token attr-name">cref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ApiStatusType<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> API执行状态<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>para</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>see</span> <span class="token attr-name">langword</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>messageId<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> 消息ID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>para</span><span class="token punctuation">&gt;</span></span></span>
<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>returns</span><span class="token punctuation">&gt;</span></span></span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">ValueTask<span class="token punctuation">&lt;</span><span class="token punctuation">(</span>ApiStatus apiStatus<span class="token punctuation">,</span> <span class="token keyword">int</span> messageId<span class="token punctuation">)</span><span class="token punctuation">&gt;</span></span> <span class="token function">SendGroupMessage</span><span class="token punctuation">(</span>
    <span class="token class-name"><span class="token keyword">long</span></span> groupId<span class="token punctuation">,</span> <span class="token class-name">MessageBody</span> message<span class="token punctuation">,</span> <span class="token class-name">TimeSpan<span class="token punctuation">?</span></span> timeout <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的内部使用一个List来按顺序存储所有消息段：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">List<span class="token punctuation">&lt;</span>SoraSegment<span class="token punctuation">&gt;</span></span> _message <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="我们该怎么做" tabindex="-1"><a class="header-anchor" href="#我们该怎么做" aria-hidden="true">#</a> 我们该怎么做</h1><p>那么我们可以通过手动初始化的办法构建自定义消息体：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">MessageBody</span> messageBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MessageBody</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>SoraSegment<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
        SoraSegment<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 生成文字消息段</span>
		SoraSegment<span class="token punctuation">.</span><span class="token function">Image</span><span class="token punctuation">(</span><span class="token string">&quot;图片名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 生成图片消息段</span>
        <span class="token range operator">..</span><span class="token punctuation">.</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它还可以更简单：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">MessageBody</span> messageBody <span class="token operator">=</span> SoraSegment<span class="token punctuation">.</span><span class="token function">At</span><span class="token punctuation">(</span><span class="token number">114514</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    SoraSegment<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token string">&quot; 早上好 &quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> SoraSegment<span class="token punctuation">.</span><span class="token function">Face</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>需要将<code>CQ码</code>变成对应的消息体?</p><p>直接用就行了：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name">MessageBody</span> messageBody <span class="token operator">=</span> <span class="token string">&quot;[CQ:at,qq=114514] 早上好 [CQ:face,id=123] ...&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>只有从 <code>string</code> 变成 <code>MessageBody</code> 时会解析CQ码；</p><p>而使用 <code>SoraSegment.Text();</code> 则不会。</p></div><p>更多的消息段类型可以在这个类里面找到：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>Sora<span class="token punctuation">.</span>Entities<span class="token punctuation">.</span>Segment<span class="token punctuation">.</span>SoraSegment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,20),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","custom_message.html.vue"]]);export{k as default};
